import 'package:flutter_tesseract_ocr/flutter_tesseract_ocr.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart'; // ใช้สำหรับการจัดการวันที่

class ImageOcrHelper {
  final ImagePicker _picker = ImagePicker(); // เลือกรูปภาพจากแกลเลอรี

  // ฟังก์ชันเลือกรูปภาพและแปลงข้อความจากรูป
  Future<Map<String, String?>> pickImageAndExtractText() async {
    final pickedFile = await _picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      return await extractTextFromImage(pickedFile.path);
    }
    return {'amount': null, 'datetime': null, 'memo': null, 'referral': null};
  }

  // ฟังก์ชันแปลงภาพเป็นข้อความ
  Future<Map<String, String?>> extractTextFromImage(String path) async {
    String extractedTextEng = await FlutterTesseractOcr.extractText(
      path,
      language: 'eng', // ภาษาอังกฤษ
    );

    String extractedTextTha = await FlutterTesseractOcr.extractText(
      path,
      language: 'tha', // ภาษาไทย
    );

    String extractedText = extractedTextTha.isNotEmpty ? extractedTextTha : extractedTextEng;
    print("Extracted Text (Eng): $extractedTextEng");
    print("Extracted Text (Thai): $extractedText");

    // ดึงจำนวนเงิน
    final RegExp decimalPattern = RegExp(r'(?<!\S)(\d{1,3}(?:,\d{3})*)?\.\d{2}(?!\S)');
    final Iterable<Match> matches = decimalPattern.allMatches(extractedText);
    double totalAmount = matches.isNotEmpty
        ? matches.map((match) {
      String numberString = match.group(0)!.replaceAll(',', '');
      return double.parse(numberString);
    }).reduce((a, b) => a + b)
        : 0.0;

    // ดึงวันที่และเวลา
    String? formattedDateTime = _extractDateTime(extractedText) ?? _extractDateTime(extractedTextEng);

    // ดึง memo
    String? formattedMemo = _extractMemo(extractedText) ?? _extractMemo(extractedTextEng);

    // ดึง referral
    final RegExp referralPattern = RegExp(r'([A-z0-9]{13,30})');
    final Match? referralMatch = referralPattern.firstMatch(extractedTextEng);
    String? referralContent = referralMatch?.group(0);

    print("amount : $totalAmount");
    print("datetime : $formattedDateTime");
    print("memo : $formattedMemo");
    print("referral : $referralContent");

    return {
      'amount': totalAmount > 0 ? totalAmount.toStringAsFixed(2) : null,
      'datetime': formattedDateTime,
      'memo': formattedMemo,
      'referral': referralContent,
    };
  }

  String? _extractDateTime(String text) {
    final RegExp dateTimePattern = RegExp(
        r'(\d{1,2})\s(.?[มกพสตพธA-Za-z]{1,4}.?)\s*(\d{2,4}).?\s*.?\s*([0|1|2|]\d{1}:\d{2}(:\d{2})?)');
    final Match? dateTimeMatch = dateTimePattern.firstMatch(text);

    if (dateTimeMatch != null) {
      String day = dateTimeMatch.group(1)!.padLeft(2, '0');
      String monthText = dateTimeMatch.group(2)!;
      String year = dateTimeMatch.group(3)!;
      String time = dateTimeMatch.group(4)!;


      Map<String, String> monthMap = {
      'ม ค': '01', 'Jan': '01',
      'ก พ': '02', 'กุ พ': '02', 'n พ': '02', 'Feb': '02',
      'มี ค': '03', 'Mar': '03',
      'เม ย': '04', 'Apr': '04',
      'พ ค': '05', 'May': '05',
      'มิ ย': '06', 'Jun': '06',
      'ก ค': '07', 'n ค': '07', 'Jul': '07',
      'ส ค': '08', 'Aug': '08',
      'ก ย': '09', 'Sept': '09',
      'ต ค': '10', 'Q.n': '10', 'a.n': '10', 'Oct': '10',
      'พ ย': '11', 'Nov': '11',
      'ธ ค': '12', 'Dec': '12',
      };

      String month = monthMap[monthText] ?? '01';

      if (year.length == 2) {
        year = year.startsWith('2') ? '20' + year : '25' + year;
      }

      int extractedYear = int.parse(year);
      if (extractedYear > DateTime.now().year) {
        extractedYear -= 543;
      }
      year = extractedYear.toString();

      String hour = time.split(':')[0].padLeft(2, '0');
      String minute = time.split(':')[1].padLeft(2, '0');
      String second = time.split(':').length > 2 ? time.split(':')[2].padLeft(2, '0') : '00';
      String dateTimeString = '$year-$month-$day $hour:$minute:$second';

      try {
        DateTime dateTime = DateTime.parse(dateTimeString);
        return DateFormat('dd/MM/yyyy HH:mm:ss').format(dateTime);
      } catch (e) {
        print("Error parsing date: $e");
      }
    }
    return null;
  }

  String? _extractMemo(String text) {
    final RegExp memoPattern = RegExp(r'(บ.{0,3}น.{0,3}ท.{0,3}ก.{1,12}า)\s*:\s*(.{1,150})');
    final Match? memoMatch = memoPattern.firstMatch(text);
    if (memoMatch != null) {
      return memoMatch.group(2)?.replaceAll(RegExp(r'(?<=[ก-๙])\s+(?=[ก-๙])'), '');
    }

    final RegExp memoPatternEng = RegExp(r'(?:Memo|memo)\s*:?\s*(.{1,255})');
    final Match? memoMatchEng = memoPatternEng.firstMatch(text);
    return memoMatchEng?.group(1)?.replaceAll(RegExp(r'(?<=[A-Za-z])\s+(?=[A-Za-z])'), '');
  }
}
